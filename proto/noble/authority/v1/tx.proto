syntax = "proto3";

package noble.authority.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/noble-assets/paramauthority/x/authority/types";

service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc Execute(MsgExecute) returns (MsgExecuteResponse);
  rpc ExecuteLegacyContent(MsgExecuteLegacyContent) returns (MsgExecuteLegacyContentResponse);

  rpc UpdateAuthority(MsgUpdateAuthority) returns (MsgUpdateAuthorityResponse);
}

// MsgExecute is the Msg/Execute request type.
message MsgExecute {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "noble/x/authority/MsgExecute";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  repeated google.protobuf.Any messages = 2;
}

// MsgExecuteResponse is the Msg/Execute response type.
message MsgExecuteResponse {}

// MsgExecuteLegacyContent is the Msg/ExecuteLegacyContent request type.
message MsgExecuteLegacyContent {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "noble/x/authority/MsgExecuteLegacyContent";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  google.protobuf.Any content = 2 [(cosmos_proto.accepts_interface) = "cosmos.gov.v1beta1.Content"];
}

// MsgExecuteLegacyContentResponse is the Msg/ExecuteLegacyContent response type.
message MsgExecuteLegacyContentResponse {}

// MsgUpdateAuthority is the Msg/UpdateAuthority request type.
message MsgUpdateAuthority {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "noble/x/authority/MsgUpdateAuthority";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string new_authority = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgUpdateAuthorityResponse is the Msg/UpdateAuthority response type.
message MsgUpdateAuthorityResponse {}
