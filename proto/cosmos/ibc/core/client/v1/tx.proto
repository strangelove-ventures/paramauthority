syntax = "proto3";

package ibc.core.client.v1;

option go_package = "github.com/strangelove-ventures/paramauthority/x/ibc/types";

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/upgrade/v1beta1/upgrade.proto";

// Msg defines the gRPC msg service.
service Msg {
  rpc ClientUpdate(MsgClientUpdate) returns (MsgClientUpdateResponse);
  rpc Upgrade(MsgUpgrade) returns (MsgUpgradeResponse);
}

// MsgClientUpdate is request type for the Query/Params RPC method.
message MsgClientUpdate {
  string authority = 1;

  option (gogoproto.goproto_getters)         = false;
 
  // the client identifier for the client to be updated if the proposal passes
  string subject_client_id = 2 [(gogoproto.moretags) = "yaml:\"subject_client_id\""];
  // the substitute client identifier for the client standing in for the subject
  // client
  string substitute_client_id = 3 [(gogoproto.moretags) = "yaml:\"substitute_client_id\""];
}

// MsgClientUpdateResponse is response type for the Query/Params RPC method.
message MsgClientUpdateResponse {}

// MsgUpgrade is request type for the Query/Params RPC method.
message MsgUpgrade {
  string authority = 1;

  cosmos.upgrade.v1beta1.Plan plan        = 2 [(gogoproto.nullable) = false];

  // An UpgradedClientState must be provided to perform an IBC breaking upgrade.
  // This will make the chain commit to the correct upgraded (self) client state
  // before the upgrade occurs, so that connecting chains can verify that the
  // new upgraded client is valid by verifying a proof on the previous version
  // of the chain. This will allow IBC connections to persist smoothly across
  // planned chain upgrades
  google.protobuf.Any upgraded_client_state = 3 [(gogoproto.moretags) = "yaml:\"upgraded_client_state\""];
}

// MsgUpgradeResponse is response type for the Query/Params RPC method.
message MsgUpgradeResponse {}